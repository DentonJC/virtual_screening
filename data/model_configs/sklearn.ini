# rparams - params grid
# gparams - params grid for gridsearch
# "metrics": [['accuracy'],['average_precision'],['f1'],['f1_micro'],['f1_macro'],['f1_weighted'],['f1_samples'],['neg_log_loss'],['precision'],['recall'],['roc_auc']]


[DEFAULT]
epochs = 1000
ep = 3


[XGB_HIV]
rparams = {
    'learning_rate': 0.1, 
    'n_estimators': 1000, 
    'seed':0, 
    'subsample': 0.8, 
    'colsample_bytree': 0.8,
    'objective': 'binary:logistic'
    }
    
gparams = {
    "learning_rate": [.01, .001, .0001], 
    'n_estimators': [10, 100],
    'subsample': [0.1, 0.3, 0.5, 0.8], 
    'colsample_bytree': [0.1, 0.3, 0.5, 0.8], 
    'max_depth': [1, 2, 3, 5], 
    'min_child_weight': [1, 2, 3, 5]
    }

[XGB_MUV]
rparams = {
    'learning_rate': 0.1, 
    'n_estimators': 1000, 
    'seed':0, 
    'subsample': 0.8, 
    'colsample_bytree': 0.8,
    'objective': 'binary:logistic'
    }
    
gparams = {
    "learning_rate": [.01, .001, .0001], 
    'n_estimators': [10, 100],
    'subsample': [0.1, 0.3, 0.5, 0.8], 
    'colsample_bytree': [0.1, 0.3, 0.5, 0.8], 
    'max_depth': [1, 2, 3, 5], 
    'min_child_weight': [1, 2, 3, 5]
    }
    
[XGB_TOX21]
rparams = {
    'learning_rate': 0.1, 
    'n_estimators': 1000, 
    'seed':0, 
    'subsample': 0.8, 
    'colsample_bytree': 0.8,
    'objective': 'binary:logistic'
    }
    
gparams = {
    'n_estimators': [100, 200, 500, 700, 1000],
    "learning_rate": [2/100, 3/100, 4/100, 5/100, 6/100, 7/100, 8/100, 9/100, 10/100], 
    'subsample': [0.1, 0.3, 0.5, 0.75, 0.8, 1.0], 
    'colsample_bytree': [0.1, 0.4, 0.6, 0.8, 1.0], 
    'max_depth': [4, 6, 8, 10],
    'min_split_gain' : [0],
    'min_child_weight': [3/5, 3/10, 3/15]
    }


[XGB_BACE]
rparams = {
    'learning_rate': 0.1, 
    'n_estimators': 1000, 
    'seed':0, 
    'subsample': 0.8, 
    'colsample_bytree': 0.8,
    'objective': 'binary:logistic'
    }
    
gparams = {
    'n_estimators': [100, 200, 500, 700, 1000, 2000, 5000, 15000, 30000],
    "learning_rate": [2/1000, 3/1000, 4/1000, 5/1000, 6/1000, 7/1000, 8/1000, 9/1000, 10/1000, 2/15000, 3/15000, 4/15000, 5/15000,, 6/15000,7/15000, 8/15000, 9/15000, 10/15000,  2/30000, 3/30000, 4/30000, 5/30000,, 6/30000,7/30000, 8/30000, 9/30000, 10/30000], 
    'subsample': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.75, 0.8, 0.9, 1.0], 
    'colsample_bytree': [0.1, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], 
    'max_depth': [4, 6, 8, 10. 15. 20],
    'min_split_gain' : [0],
    'min_child_weight': [3/5, 3/10, 3/15, 1, 2, 5, 7, 9, 13]
    }

[XGB_REG]
rparams = {
    'learning_rate': 0.1, 
    'n_estimators': 1000, 
    'seed':0, 
    'subsample': 0.8, 
    'colsample_bytree': 0.8,
    'objective': 'reg:linear'
    }
    
gparams = {
    'n_estimators': [100, 200, 500, 700, 1000, 2000, 5000, 15000, 30000],
    "learning_rate": [2/1000, 3/1000, 4/1000, 5/1000, 6/1000, 7/1000, 8/1000, 9/1000, 10/1000, 2/15000, 3/15000, 4/15000, 5/15000,, 6/15000,7/15000, 8/15000, 9/15000, 10/15000,  2/30000, 3/30000, 4/30000, 5/30000,, 6/30000,7/30000, 8/30000, 9/30000, 10/30000], 
    'subsample': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.75, 0.8, 0.9, 1.0], 
    'colsample_bytree': [0.1, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], 
    'max_depth': [4, 6, 8, 10. 15. 20],
    'min_split_gain' : [0],
    'min_child_weight': [3/5, 3/10, 3/15, 1, 2, 5, 7, 9, 13]
    }

[SVC_HIV]
rparams = {'C':1.0, 'cache_size':200, 'coef0':0.0,
    'decision_function_shape':'ovr', 'degree':3, 'gamma':'auto', 'kernel':'rbf',
    'max_iter':-1}
    
gparams = {
    'C':[0.1, 1.0, 10.0, 100.0, 1000.0],
    'kernel':['linear', 'poly', 'rbf', 'sigmoid'],
    'degree': [3,5,7],
    'gamma': [0.1, 0.2, 0.5, 0.7],
    'shrinking' : [True, False],
    'class_weight': ['balanced', None]
    }



[SVC_BACE]
rparams = {'C':1.0, 'cache_size':200, 'coef0':0.0,
    'decision_function_shape':'ovr', 'degree':3, 'gamma':'auto', 'kernel':'rbf',
    'max_iter':-1}
    
gparams = {
    'C':[0.1, 1.0, 10.0, 100.0, 1000.0, 20000, 40000, 100000, 0.01, 3, 5, 1.5],
    'kernel':['linear', 'poly', 'rbf', 'sigmoid'],
    'degree': [3,5,7,9,13,15],
    'gamma': [0.1, 0.2, 0.5, 0.7, .3, .6, .9, 1],
    'shrinking' : [True, False],
    'class_weight': ['balanced', None]
    }

[SVC_MUV]
rparams = {'C':1.0, 'cache_size':200, 'coef0':0.0,
    'decision_function_shape':'ovr', 'degree':3, 'gamma':'auto', 'kernel':'rbf',
    'max_iter':-1}
    
gparams = {
    'C':[0.1, 1.0, 10.0, 100.0, 1000.0],
    'kernel':['linear', 'poly', 'rbf', 'sigmoid'],
    'degree': [3,5,7],
    'gamma': [0.1, 0.2, 0.5, 0.7],
    'shrinking' : [True, False],
    'class_weight': ['balanced', None]
    }

[SVC_TOX21]
rparams = {'C':1.0, 'cache_size':500, 'coef0':0.0,
    'decision_function_shape':'ovr', 'degree':3, 'gamma':'auto', 'kernel':'rbf',
    'max_iter':-1}

gparams = {
    'C':[0.1, 1.0, 0.5, 0.9, 1.2, 2.0, 10.0, 100.0, 1000.0],
    'kernel':['linear', 'poly', 'rbf', 'sigmoid'],
    'degree': [3,5,7,13],
    'gamma': [0.1, 0.2, 0.5, 0.7],
    'shrinking' : [True, False],
    'class_weight': ['balanced', None],
    'max_iter':[-1, 10, 100, 300]
    }


[KNN_HIV]
rparams = {'n_neighbors':2, 'weights':'uniform', 'algorithm':'auto', 'leaf_size':30, 'p':2, 'metric':'minkowski'}
    
gparams = {
    'weights': ['uniform', 'distance'],
    'algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute'],
    'leaf_size': [10, 20, 30, 50, 100],
    'p' : [1, 2]
    }

[KNN_MUV]
rparams = {'n_neighbors':2, 'weights':'uniform', 'algorithm':'auto', 'leaf_size':30, 'p':2, 'metric':'minkowski'}
    
gparams = {
    'weights': ['uniform', 'distance'],
    'algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute'],
    'leaf_size': [10, 20, 30, 50, 100],
    'p' : [1, 2]
    }

[KNN_TOX21]
rparams = {'n_neighbors':2, 'weights':'uniform', 'algorithm':'auto', 'leaf_size':30, 'p':2, 'metric':'minkowski'}
    
gparams = {
    'n_neighbors':[2, 3, 5, 7, 9, 13],
    'weights': ['uniform', 'distance'],
    'algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute'],
    'leaf_size': [10, 20, 30, 50, 100],
    'p' : [1, 2]
    }


[KNN_BACE]
rparams = {'n_neighbors':2, 'weights':'uniform', 'algorithm':'auto', 'leaf_size':30, 'p':2, 'metric':'minkowski'}
    
gparams = {
    'n_neighbors':[2, 3, 5, 7, 9, 13, 15, 17],
    'weights': ['uniform', 'distance'],
    'algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute'],
    'leaf_size': [1,3,5,9,10, 20, 30, 50, 100,5000],
    'p' : [1, 2, 3, 5, 7, 9, 13]
    }


[LOGREG_HIV]
rparams = {'C':1.0}

    
gparams = {
    'C': [0.01, 0.1, 1.0, 10.0, 100.0],
    'fit_intercept': [True, False],
    'class_weight': ['balanced', None],
    'solver': ['newton-cg', 'lbfgs', 'liblinear'],
    'max_iter': [30000],
    "class_weight": ['balanced']
    }

[LOGREG_MUV]
rparams = {'C':1.0}

gparams = {
    'C': [0.01, 0.1, 1.0, 10.0, 100.0],
    'fit_intercept': [True, False],
    'class_weight': ['balanced', None],
    'solver': ['newton-cg', 'lbfgs', 'liblinear'],
    'max_iter': [30000]
    }

[LOGREG_TOX21]
rparams = {'class_weight': 'balanced'}

gparams = {
    'C': [0.01, 0.1, 1.0, 2.0, 0.5, 0.9, 1.1, 1.2, 10.0, 50.0, 80.0, 100.0, 200.0, 1000.0, 10000.0, 50.0000, 10000.0],
    'max_iter': [10000, 15000, 30000, 60000, 120000, 240000, 500000, 1000000, 5000000, 10000000, 20000000, 50000000, 100000000, 200000000, 500000000, 1000000000],
    'solver': ['newton-cg', 'lbfgs', 'liblinear']
    }
 


[LOGREG_BACE]
rparams = {'solver': 'sag', 'max_iter': 10000, 'class_weight': 'balanced', 'C': 0.001}
# solver: sag, max_iter: 100000000, C: 105
gparams = {
    'C': [0.001, 0.01, 0.1, 1, 10.0, 30, 50.0, 60, 65, 70, 85, 80.0, 75, 100, 105, 95, 200.0, 300, 500, 900, 950, 1000.0, 1050, 1100, 1500, 2000.0, 5000, 10000, 100000, 1000000, 5000000],
    'max_iter': [10, 100, 150, 200, 30, 40, 50, 60, 3000, 5000, 10000, 15000, 30000, 5000000, 2000000, 1000000, 20000000, 50000000, 100000000, 200000000, 500000000, 1000000000],
    'solver': ['sag', 'newton-cg', 'lbfgs', 'liblinear'],
    'class_weight':['balanced', None]
    }

[RF_HIV]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }
    
gparams = {
    'n_estimators' : [10, 20, 60, 200, 500, 5000],
    'criterion' : ['gini', 'entropy'],
    'min_samples_split' : [2, 3, 5],
    'min_samples_leaf' : [1, 5, 10],
    "class_weight": ['balanced']
# 'min_weight_fraction_leaf' : [],
# 'max_leaf_nodes' : [],
# 'min_impurity_split' : [],
# 'min_impurity_decrease' : [],
# 'bootstrap' : [],
# 'oob_score' : []
    }



[RF_MUV]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }

    
gparams = {
    'n_estimators' : [10, 20, 60],
    'criterion' : ['gini', 'entropy'],
    "class_weight": ['balanced', None]
    }

[RF_TOX21]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }

    
gparams = {
    'n_estimators' : [10, 20, 100, 200, 300, 500, 2000],
    'min_samples_leaf' : [1, 5, 10, 15, 30, 60, 100, 200],
    'min_samples_split' : [2, 3, 5, 10, 15, 30, 60, 100],
    'min_weight_fraction_leaf' : [0.1, .2, .3, .4, .5],
    'max_leaf_nodes' : [2, 3, 5, 10, 15, 30, 60, 100],
    'criterion' : ['gini', 'entropy'],
    "class_weight": ['balanced', None]
    }


[RF_BACE]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }

    
gparams = {
    'n_estimators' : [10, 20, 100, 200, 300, 500, 2000, 5000],
    'min_samples_leaf' : [1, 5, 10, 15, 30, 60, 100, 200, 3, 500, 1000],
    'min_samples_split' : [2, 3, 5, 10, 15, 30, 60, 100, 500],
    'min_weight_fraction_leaf' : [0.00001, 0.0001, 0.001, 0.01, 0.1],
    'max_leaf_nodes' : [2, 3, 5, 10, 15, 30, 60, 100, 200],
    'criterion' : ['gini', 'entropy'],
    "class_weight": ['balanced', None]
    }

[IF_HIV]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }
    
gparams = {
    'n_estimators' : [10, 100, 500, 1000],
    'contamination' : [0.1, 0.2, 0.3, 0.4, 0.5],
    'bootstrap' : ['True', 'False'],
    "class_weight": ['balanced']
    }


[IF_MUV]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }

    
gparams = {
    'n_estimators' : [10, 100, 500, 1000],
    'contamination' : [0.1, 0.2, 0.3, 0.4, 0.5],
    'bootstrap' : ['True', 'False'],
    "class_weight": ['balanced']
    }

[IF_TOX21]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }

    
gparams = {
    'verbose' : [2],
    'n_estimators' : [10, 100, 500, 1000],
    'contamination' : [0.1, 0.2, 0.3, 0.4, 0.5],
    'bootstrap' : ['True', 'False'],
    "class_weight": ['balanced']
    }




[IF_BACE]
rparams = {
    'n_jobs' : -1, 
    'verbose' : 2
    }

    
gparams = {
    'verbose' : [2],
    'n_estimators' : [10, 100, 500, 1000, 5000],
    'contamination' : [0.1, 0.2, 0.3, 0.4, 0.5],
    'bootstrap' : ['True', 'False']
    }
